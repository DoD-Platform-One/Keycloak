{{- if .Values.bbtests }}
{{- if .Values.bbtests.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "keycloak.fullname" . }}-create-ci-cypress-user-hook
  labels:
    app: {{ template "keycloak.name" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
  {{- range $key, $value := .Values.service.labels }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: {{ template "keycloak.fullname" . }}-create-ci-cypress-user-hook
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app: {{ template "keycloak.name" . }}
        heritage: {{ .Release.Service }}
        release: {{ .Release.Name }}
      {{- range $key, $value := .Values.service.labels }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: OnFailure
      containers:
      - name: {{ template "keycloak.fullname" . }}-create-ci-cypress-user
        image: "registry1.dso.mil/ironbank/big-bang/base:1.0.0"
        imagePullPolicy: {{ .Values.image.pullPolicy  }}
        command:
        - /bin/sh
        - -c
        - |
          # create_keycloak_cypress_user()
          default_admin_user="{{ default "admin" .Values.secrets.credentials.stringData.adminuser }}"
          default_admin_password="{{ default "password" .Values.secrets.credentials.stringData.password }}"
          base_url="https://keycloak-http.keycloak.svc.cluster.local:8443/auth"
          access_token=""
          realm="baby-yoda"

          echo "Base URL: $base_url"

          token_req=$(curl --write-out " %{http_code}" -s -k --request POST \
              -d "client_id=admin-cli" \
              -d "username=$default_admin_user" \
              -d "password=$default_admin_password" \
              -d "grant_type=password" \
              "$base_url/realms/master/protocol/openid-connect/token")

          token_req_status=${token_req##* }

          if [ "$token_req_status" != "200" ]; then
              echo -e "Check the base_url config."
              echo -e "Failed to get token: \n\t${token_req% *}"
              exit 1
          fi

          access_token=$(echo "${token_req%????}" | jq .access_token | tr -d '"')

          user_create_req=$(curl --write-out " %{http_code}" -s -k --request POST \
              --header "Content-Type: application/json" \
              --header "Authorization: Bearer $access_token" \
              --data '{
          "enabled": true,
          "username": "{{ .Values.bbtests.cypress.envs.tnr_username }}",
          "email": "{{ .Values.bbtests.cypress.envs.tnr_email }}",
          "firstName": "{{ .Values.bbtests.cypress.envs.tnr_firstName }}",
          "lastName": "{{ .Values.bbtests.cypress.envs.tnr_lastName }}",
          "credentials": [
              {
              "type": "password",
              "value": "{{ .Values.bbtests.cypress.envs.tnr_password }}",
              "temporary": false
              }
          ]
          }' "$base_url/admin/realms/$realm/users")

          user_create_req_status=${user_create_req##* }

          if [ "$user_create_req_status" != "201" ]; then
              error_msg=$(echo "${user_create_req% *}" | jq .errorMessage | tr -d '"')
              if [ "$error_msg" == "User exists with the same username" ]; then
                  echo -e "Cypress user already created. Skipping..."
                  exit 0
              fi
              echo -e "Failed to create Keycloak cypress user: \n\t${error_msg}"
              exit 1
          fi
        resources:
          requests:
            memory: 256Mi
            cpu: 100m
          limits:
            memory: 256Mi
            cpu: 100m
{{- end }}
{{- end }}
